{
  "stats": {
    "suites": 27,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2024-11-28T19:21:12.685Z",
    "end": "2024-11-28T19:21:14.932Z",
    "duration": 2247,
    "testsRegistered": 58,
    "passPercent": 82.75862068965517,
    "pendingPercent": 0,
    "other": 2,
    "hasOther": true,
    "skipped": 10,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "db28b0b2-d497-430c-883a-0b4b00d5debf",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eae1debb-f5cd-4da1-bc48-7ec78d80029a",
          "title": "CitaController",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
          "file": "\\test\\CitaController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CitaController\"",
              "fullTitle": "CitaController \"before each\" hook in \"CitaController\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { params: {}, body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy()\n};",
              "err": {},
              "uuid": "bf31a1e1-bf8a-423a-9b79-ec7e9180060d",
              "parentUUID": "eae1debb-f5cd-4da1-bc48-7ec78d80029a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"CitaController\"",
              "fullTitle": "CitaController \"after each\" hook in \"CitaController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7e080aa1-a30a-44f7-b670-02e8900e913c",
              "parentUUID": "eae1debb-f5cd-4da1-bc48-7ec78d80029a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b36ae20a-30a7-46a2-839b-652050a38793",
              "title": "getAllCitas",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
              "file": "\\test\\CitaController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver todas las citas con mensaje de éxito",
                  "fullTitle": "CitaController getAllCitas debería devolver todas las citas con mensaje de éxito",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCitas = [{ idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', id: 1 }];\nstub = sinon.stub(Cita, 'findAll').resolves(mockCitas);\nawait CitaController.getAllCitas(req, res);\nexpect(res.json.calledWith({\n    message: \"Lista de todas las Citas\",\n    data: mockCitas\n})).to.be.true;",
                  "err": {},
                  "uuid": "504a77c8-a2ed-4535-8f86-cf6ed8aa0732",
                  "parentUUID": "b36ae20a-30a7-46a2-839b-652050a38793",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si ocurre un problema",
                  "fullTitle": "CitaController getAllCitas debería devolver un error si ocurre un problema",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cita, 'findAll').rejects(new Error('Database error'));\nawait CitaController.getAllCitas(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Database error' })).to.be.true;",
                  "err": {},
                  "uuid": "46de3012-16d6-4031-84bc-ae6b843d6e76",
                  "parentUUID": "b36ae20a-30a7-46a2-839b-652050a38793",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "504a77c8-a2ed-4535-8f86-cf6ed8aa0732",
                "46de3012-16d6-4031-84bc-ae6b843d6e76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c31bf07-fc0e-4e87-a43d-e11f9cefa25b",
              "title": "createCita",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
              "file": "\\test\\CitaController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería crear una cita y devolver el mensaje de éxito",
                  "fullTitle": "CitaController createCita debería crear una cita y devolver el mensaje de éxito",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCita = { fechacita: '2024-11-12', ubicacion: 'Oficina', idclientes: 1 };\nconst createdCita = { idcitas: 2, ...newCita };\nstub = sinon.stub(Cita, 'create').resolves(createdCita);\nreq.body = newCita;\nawait CitaController.createCita(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    message: \"Cita Creada exitosamente\",\n    data: createdCita\n})).to.be.true;",
                  "err": {},
                  "uuid": "70225746-a582-42e6-97d6-594449e92fde",
                  "parentUUID": "9c31bf07-fc0e-4e87-a43d-e11f9cefa25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si no se puede crear la cita",
                  "fullTitle": "CitaController createCita debería devolver un error si no se puede crear la cita",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cita, 'create').rejects(new Error('Error de creación'));\nawait CitaController.createCita(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Error de creación' })).to.be.true;",
                  "err": {},
                  "uuid": "71637d83-4813-480d-a87c-e919a24fb499",
                  "parentUUID": "9c31bf07-fc0e-4e87-a43d-e11f9cefa25b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70225746-a582-42e6-97d6-594449e92fde",
                "71637d83-4813-480d-a87c-e919a24fb499"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f31767e5-2692-47c4-b855-78983995bcab",
              "title": "getCitaById",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
              "file": "\\test\\CitaController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver una cita si se encuentra el ID",
                  "fullTitle": "CitaController getCitaById debería devolver una cita si se encuentra el ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCita = { idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', id: 1 };\nstub = sinon.stub(Cita, 'findById').resolves(mockCita);\nreq.params.id = 1;\nawait CitaController.getCitaById(req, res);\nexpect(res.json.calledWith({\n    message: \"Cita encontrada\",\n    data: mockCita\n})).to.be.true;",
                  "err": {},
                  "uuid": "8193b26e-186b-4500-8ec9-529bb041a9f1",
                  "parentUUID": "f31767e5-2692-47c4-b855-78983995bcab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si la cita no existe",
                  "fullTitle": "CitaController getCitaById debería devolver un 404 si la cita no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cita, 'findById').resolves(null);\nreq.params.id = 999;\nawait CitaController.getCitaById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cita no encontrada\" })).to.be.true;",
                  "err": {},
                  "uuid": "bde2bd4d-dbf7-4dad-90d8-c95268f54c74",
                  "parentUUID": "f31767e5-2692-47c4-b855-78983995bcab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8193b26e-186b-4500-8ec9-529bb041a9f1",
                "bde2bd4d-dbf7-4dad-90d8-c95268f54c74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cb0b049-3512-4045-8faf-e1111e42441c",
              "title": "updateCita",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
              "file": "\\test\\CitaController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería actualizar una cita y devolver el mensaje de éxito",
                  "fullTitle": "CitaController updateCita debería actualizar una cita y devolver el mensaje de éxito",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCita = { idcitas: 1, fechacita: '2024-12-01', ubicacion: 'Casa', id: 1 };\nstub = sinon.stub(Cita, 'update').resolves(updatedCita);\nreq.params.id = 1;\nreq.body = updatedCita;\nawait CitaController.updateCita(req, res);\nexpect(res.json.calledWith({\n    message: \"Cita actualizada\",\n    data: updatedCita\n})).to.be.true;",
                  "err": {},
                  "uuid": "9e03f318-c1a0-4249-867c-ef3ef782de63",
                  "parentUUID": "1cb0b049-3512-4045-8faf-e1111e42441c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si la cita a actualizar no existe",
                  "fullTitle": "CitaController updateCita debería devolver un 404 si la cita a actualizar no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cita, 'update').resolves(null);\nreq.params.id = 999;\nawait CitaController.updateCita(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cita no encontrada\" })).to.be.true;",
                  "err": {},
                  "uuid": "ae5d94b4-15d1-477d-ae6d-6673b1c49577",
                  "parentUUID": "1cb0b049-3512-4045-8faf-e1111e42441c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e03f318-c1a0-4249-867c-ef3ef782de63",
                "ae5d94b4-15d1-477d-ae6d-6673b1c49577"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0462e086-2302-48c7-aa64-3c59350fed47",
              "title": "deleteCita",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaController.test.js",
              "file": "\\test\\CitaController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería eliminar una cita y devolver el mensaje de éxito",
                  "fullTitle": "CitaController deleteCita debería eliminar una cita y devolver el mensaje de éxito",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCita = { idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', id: 1 };\nsinon.stub(Cita, 'findById').resolves(mockCita);\nsinon.stub(Cita, 'delete').resolves(mockCita);\nreq.params.id = 1;\nawait CitaController.deleteCita(req, res);\nexpect(res.json.calledWith({\n    message: \"Cita eliminada\",\n    data: mockCita\n})).to.be.true;",
                  "err": {},
                  "uuid": "c861e610-d4f5-4ed6-a2be-5bdb4ab11fa8",
                  "parentUUID": "0462e086-2302-48c7-aa64-3c59350fed47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si la cita a eliminar no existe",
                  "fullTitle": "CitaController deleteCita debería devolver un 404 si la cita a eliminar no existe",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cita, 'findById').resolves(null);\nreq.params.id = 999;\nawait CitaController.deleteCita(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cita no encontrada\" })).to.be.true;",
                  "err": {},
                  "uuid": "3ccc7d23-3cf3-4362-8331-246fd6240339",
                  "parentUUID": "0462e086-2302-48c7-aa64-3c59350fed47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si ocurre un problema al eliminar",
                  "fullTitle": "CitaController deleteCita debería devolver un error si ocurre un problema al eliminar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCita = { idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', id: 1 };\nsinon.stub(Cita, 'findById').resolves(mockCita);\nsinon.stub(Cita, 'delete').rejects(new Error('Error al eliminar'));\nawait CitaController.deleteCita(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Error al eliminar' })).to.be.true;",
                  "err": {},
                  "uuid": "78d609af-51be-4e9f-9116-b272692eabc6",
                  "parentUUID": "0462e086-2302-48c7-aa64-3c59350fed47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c861e610-d4f5-4ed6-a2be-5bdb4ab11fa8",
                "3ccc7d23-3cf3-4362-8331-246fd6240339",
                "78d609af-51be-4e9f-9116-b272692eabc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c7278c29-b36c-43b1-a774-b1e5de1a90b5",
          "title": "Cita Model",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
          "file": "\\test\\CitaModel.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Cita Model\"",
              "fullTitle": "Cita Model \"after each\" hook in \"Cita Model\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restaura los stubs después de cada prueba",
              "err": {},
              "uuid": "a317c54f-ec9d-4bac-a9e9-068ed9a60a87",
              "parentUUID": "c7278c29-b36c-43b1-a774-b1e5de1a90b5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "793ed894-2c25-4464-b16a-d9f34abd237a",
              "title": "findAll",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
              "file": "\\test\\CitaModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver todas las citas",
                  "fullTitle": "Cita Model findAll debería devolver todas las citas",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRows = [{ idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', idclientes: 1 }];\nsinon.stub(pool, 'query').resolves({ rows: mockRows });\nconst result = await Cita.findAll();\nexpect(result).to.deep.equal(mockRows);",
                  "err": {},
                  "uuid": "61d886ff-ecb3-4cd6-ae7c-628de5e33118",
                  "parentUUID": "793ed894-2c25-4464-b16a-d9f34abd237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un array vacío si no hay citas",
                  "fullTitle": "Cita Model findAll debería devolver un array vacío si no hay citas",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(pool, 'query').resolves({ rows: [] });\nconst result = await Cita.findAll();\nexpect(result).to.deep.equal([]);",
                  "err": {},
                  "uuid": "4174ca48-93c5-4ce7-9633-99a06f6edffe",
                  "parentUUID": "793ed894-2c25-4464-b16a-d9f34abd237a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61d886ff-ecb3-4cd6-ae7c-628de5e33118",
                "4174ca48-93c5-4ce7-9633-99a06f6edffe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79621a8e-d55f-4eb7-acec-c0466346ddb1",
              "title": "create",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
              "file": "\\test\\CitaModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería crear una nueva cita y devolverla",
                  "fullTitle": "Cita Model create debería crear una nueva cita y devolverla",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { fechacita: '2024-11-12', ubicacion: 'Oficina', idclientes: 1 };\nconst mockResult = { idcitas: 2, ...data };\nsinon.stub(pool, 'query').resolves({ rows: [mockResult] });\nconst result = await Cita.create(data);\nexpect(result).to.deep.equal(mockResult);",
                  "err": {},
                  "uuid": "aee33777-ac45-4603-98e8-1472c7921137",
                  "parentUUID": "79621a8e-d55f-4eb7-acec-c0466346ddb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería fallar al crear una cita si faltan datos",
                  "fullTitle": "Cita Model create debería fallar al crear una cita si faltan datos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { ubicacion: 'Oficina', idclientes: 1 }; // Falta 'fechacita'\nsinon.stub(pool, 'query').rejects(new Error('Missing data'));\ntry {\n    await Cita.create(data);\n} catch (error) {\n    expect(error.message).to.equal('Missing data');\n}",
                  "err": {},
                  "uuid": "8c1cb1ac-3d2c-4d17-85d7-fd6533993ded",
                  "parentUUID": "79621a8e-d55f-4eb7-acec-c0466346ddb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aee33777-ac45-4603-98e8-1472c7921137",
                "8c1cb1ac-3d2c-4d17-85d7-fd6533993ded"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8ac5fea-42ba-4835-b4e4-eb59be54cada",
              "title": "findById",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
              "file": "\\test\\CitaModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería encontrar una cita por su ID",
                  "fullTitle": "Cita Model findById debería encontrar una cita por su ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRow = { idcitas: 1, fechacita: '2024-11-12', ubicacion: 'Oficina', idclientes: 1 };\nsinon.stub(pool, 'query').resolves({ rows: [mockRow] });\nconst result = await Cita.findById(1);\nexpect(result).to.deep.equal(mockRow);",
                  "err": {},
                  "uuid": "b3a50d84-c526-41f4-9c2e-0b7ba94dd578",
                  "parentUUID": "d8ac5fea-42ba-4835-b4e4-eb59be54cada",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3a50d84-c526-41f4-9c2e-0b7ba94dd578"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8de9643a-8785-4b08-8fea-acc5a5288167",
              "title": "update",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
              "file": "\\test\\CitaModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería actualizar una cita y devolverla",
                  "fullTitle": "Cita Model update debería actualizar una cita y devolverla",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = { fechacita: '2024-12-01', ubicacion: 'Casa', idclientes: 1 };\nconst mockResult = { idcitas: 1, ...data };\nsinon.stub(pool, 'query').resolves({ rows: [mockResult] });\nconst result = await Cita.update(1, data);\nexpect(result).to.deep.equal(mockResult);",
                  "err": {},
                  "uuid": "6cc92244-8455-4a89-80af-0ca297ad249a",
                  "parentUUID": "8de9643a-8785-4b08-8fea-acc5a5288167",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6cc92244-8455-4a89-80af-0ca297ad249a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37a9bbaa-e8f5-47a7-a42a-14deda166b58",
              "title": "delete",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\CitaModel.test.js",
              "file": "\\test\\CitaModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería marcar una cita como eliminada y devolverla",
                  "fullTitle": "Cita Model delete debería marcar una cita como eliminada y devolverla",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockRow = {\n    idcitas: 1,\n    fechacita: '2024-11-12',\n    ubicacion: 'Oficina',\n    idclientes: 1,\n    delete_at: new Date(),\n};\nsinon.stub(pool, 'query').resolves({ rows: [mockRow] });\nconst result = await Cita.delete(1);\nexpect(result).to.deep.equal(mockRow);",
                  "err": {},
                  "uuid": "a9f727c6-141d-4000-bc57-6c84752aed44",
                  "parentUUID": "37a9bbaa-e8f5-47a7-a42a-14deda166b58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9f727c6-141d-4000-bc57-6c84752aed44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a4a1683-5868-4394-b042-fa847f966309",
          "title": "ClienteController",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
          "file": "\\test\\ClienteController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"ClienteController\"",
              "fullTitle": "ClienteController \"before each\" hook in \"ClienteController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = { params: {}, body: {} };\nres = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy()\n};",
              "err": {},
              "uuid": "b8dbe1d4-e8a7-4d07-9773-cc5b79e4f137",
              "parentUUID": "0a4a1683-5868-4394-b042-fa847f966309",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"ClienteController\"",
              "fullTitle": "ClienteController \"after each\" hook in \"ClienteController\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e4e41353-92dc-41f9-9cf8-9f3d345a8fcc",
              "parentUUID": "0a4a1683-5868-4394-b042-fa847f966309",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8c225161-6e66-46cb-bc37-35d15752f34c",
              "title": "getAllClientes",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
              "file": "\\test\\ClienteController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver todos los clientes con un mensaje de éxito",
                  "fullTitle": "ClienteController getAllClientes debería devolver todos los clientes con un mensaje de éxito",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [{ id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' }];\nstub = sinon.stub(Cliente, 'findAll').resolves(mockClientes);\nawait ClienteController.getAllClientes(req, res);\nexpect(res.json.calledWith({\n    message: \"Lista de todos los Clientes\",\n    clientes: mockClientes\n})).to.be.true;",
                  "err": {},
                  "uuid": "82715edf-0d6e-43d4-ae13-f478648f5d66",
                  "parentUUID": "8c225161-6e66-46cb-bc37-35d15752f34c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si ocurre un problema al obtener los clientes",
                  "fullTitle": "ClienteController getAllClientes debería devolver un error si ocurre un problema al obtener los clientes",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cliente, 'findAll').rejects(new Error('Database error'));\nawait ClienteController.getAllClientes(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Database error' })).to.be.true;",
                  "err": {},
                  "uuid": "b84f77d3-d1a3-438d-b1bb-23380a6364ac",
                  "parentUUID": "8c225161-6e66-46cb-bc37-35d15752f34c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82715edf-0d6e-43d4-ae13-f478648f5d66",
                "b84f77d3-d1a3-438d-b1bb-23380a6364ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae0b6518-d3cb-4872-ab74-5694262216f3",
              "title": "createCliente",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
              "file": "\\test\\ClienteController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería crear un cliente y devolver un mensaje de éxito",
                  "fullTitle": "ClienteController createCliente debería crear un cliente y devolver un mensaje de éxito",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCliente = { nombre: 'Maria Lopez', email: 'maria@example.com' };\nconst createdCliente = { id: 2, ...newCliente };\nstub = sinon.stub(Cliente, 'create').resolves(createdCliente);\nreq.body = newCliente;\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledWith({\n    message: \"Creado exitosamente el cliente\",\n    cliente: createdCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "9abf4a01-abe1-4dea-b7f3-7a13c5705a54",
                  "parentUUID": "ae0b6518-d3cb-4872-ab74-5694262216f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si no se puede crear el cliente",
                  "fullTitle": "ClienteController createCliente debería devolver un error si no se puede crear el cliente",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cliente, 'create').rejects(new Error('Error de creación'));\nawait ClienteController.createCliente(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Error de creación' })).to.be.true;",
                  "err": {},
                  "uuid": "2a386371-a31e-4682-aa44-aa7e3c1f37a0",
                  "parentUUID": "ae0b6518-d3cb-4872-ab74-5694262216f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9abf4a01-abe1-4dea-b7f3-7a13c5705a54",
                "2a386371-a31e-4682-aa44-aa7e3c1f37a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f49d2ee4-5a66-41eb-b5d6-569682103b80",
              "title": "getClienteById",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
              "file": "\\test\\ClienteController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver un cliente si se encuentra el ID",
                  "fullTitle": "ClienteController getClienteById debería devolver un cliente si se encuentra el ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' };\nstub = sinon.stub(Cliente, 'findById').resolves(mockCliente);\nreq.params.id = 1;\nawait ClienteController.getClienteById(req, res);\nexpect(res.json.calledWith({\n    message: \"Cliente encontrado\",\n    cliente: mockCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "95ae6182-8601-4f45-8171-9269e38a8c91",
                  "parentUUID": "f49d2ee4-5a66-41eb-b5d6-569682103b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si el cliente no existe",
                  "fullTitle": "ClienteController getClienteById debería devolver un 404 si el cliente no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cliente, 'findById').resolves(null);\nreq.params.id = 999;\nawait ClienteController.getClienteById(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cliente no encontrado\" })).to.be.true;",
                  "err": {},
                  "uuid": "7915103c-87f0-483b-b133-d40b50b27762",
                  "parentUUID": "f49d2ee4-5a66-41eb-b5d6-569682103b80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95ae6182-8601-4f45-8171-9269e38a8c91",
                "7915103c-87f0-483b-b133-d40b50b27762"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7f59594-8042-4141-be58-1d839764a0b0",
              "title": "updateCliente",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
              "file": "\\test\\ClienteController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería actualizar un cliente y devolver un mensaje de éxito",
                  "fullTitle": "ClienteController updateCliente debería actualizar un cliente y devolver un mensaje de éxito",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCliente = { id: 1, nombre: 'Juan Pérez', email: 'juan_perez@example.com' };\nstub = sinon.stub(Cliente, 'update').resolves(updatedCliente);\nreq.params.id = 1;\nreq.body = updatedCliente;\nawait ClienteController.updateCliente(req, res);\nexpect(res.json.calledWith({\n    message: \"Cliente actualizado\",\n    cliente: updatedCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "19c2b6ef-45c3-4aec-8ec2-baa6bde3f2a4",
                  "parentUUID": "f7f59594-8042-4141-be58-1d839764a0b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si el cliente a actualizar no existe",
                  "fullTitle": "ClienteController updateCliente debería devolver un 404 si el cliente a actualizar no existe",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "stub = sinon.stub(Cliente, 'update').resolves(null);\nreq.params.id = 999;\nawait ClienteController.updateCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cliente no encontrado\" })).to.be.true;",
                  "err": {},
                  "uuid": "cb5b9963-dc51-4bdd-b8f7-2d84bbe6689d",
                  "parentUUID": "f7f59594-8042-4141-be58-1d839764a0b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19c2b6ef-45c3-4aec-8ec2-baa6bde3f2a4",
                "cb5b9963-dc51-4bdd-b8f7-2d84bbe6689d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65b2f431-49af-46b3-b260-f01588a62749",
              "title": "deleteCliente",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteController.test.js",
              "file": "\\test\\ClienteController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería eliminar un cliente y devolver un mensaje de éxito",
                  "fullTitle": "ClienteController deleteCliente debería eliminar un cliente y devolver un mensaje de éxito",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' };\nsinon.stub(Cliente, 'findById').resolves(mockCliente);\nsinon.stub(Cliente, 'delete').resolves(mockCliente);\nreq.params.id = 1;\nawait ClienteController.deleteCliente(req, res);\nexpect(res.json.calledWith({\n    message: \"Cliente eliminado\",\n    cliente: mockCliente\n})).to.be.true;",
                  "err": {},
                  "uuid": "aa73f736-e2c4-4373-8cb6-4464c9a97047",
                  "parentUUID": "65b2f431-49af-46b3-b260-f01588a62749",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un 404 si el cliente a eliminar no existe",
                  "fullTitle": "ClienteController deleteCliente debería devolver un 404 si el cliente a eliminar no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(Cliente, 'findById').resolves(null);\nreq.params.id = 999;\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(404)).to.be.true;\nexpect(res.json.calledWith({ message: \"Cliente no encontrado\" })).to.be.true;",
                  "err": {},
                  "uuid": "4fb8eca5-698e-4d63-8800-8e9280c0273f",
                  "parentUUID": "65b2f431-49af-46b3-b260-f01588a62749",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "debería devolver un error si ocurre un problema al eliminar",
                  "fullTitle": "ClienteController deleteCliente debería devolver un error si ocurre un problema al eliminar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan Pérez', email: 'juan@example.com' };\nsinon.stub(Cliente, 'findById').resolves(mockCliente);\nsinon.stub(Cliente, 'delete').rejects(new Error('Error al eliminar'));\nawait ClienteController.deleteCliente(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledWith({ error: 'Error al eliminar' })).to.be.true;",
                  "err": {},
                  "uuid": "775405e8-31b5-4a45-a1f3-0b27e20926fb",
                  "parentUUID": "65b2f431-49af-46b3-b260-f01588a62749",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa73f736-e2c4-4373-8cb6-4464c9a97047",
                "4fb8eca5-698e-4d63-8800-8e9280c0273f",
                "775405e8-31b5-4a45-a1f3-0b27e20926fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4be5742e-6a75-48de-b3db-c2003ee0a943",
          "title": "Cliente Model",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
          "file": "\\test\\ClienteModel.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Cliente Model\"",
              "fullTitle": "Cliente Model \"after each\" hook in \"Cliente Model\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restaurar los stubs y mocks después de cada prueba",
              "err": {},
              "uuid": "0883e94e-b501-41ef-8269-8de70f1075f7",
              "parentUUID": "4be5742e-6a75-48de-b3db-c2003ee0a943",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fb86f982-6ecd-43e4-bef3-3f606ac46cf5",
              "title": "findAll",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
              "file": "\\test\\ClienteModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver todos los clientes",
                  "fullTitle": "Cliente Model findAll debería devolver todos los clientes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClientes = [{ id: 1, nombre: 'Juan', apellidos: 'Pérez' }];\nsinon.stub(pool, 'query').resolves({ rows: mockClientes });\nconst result = await Cliente.findAll();\nexpect(result).to.deep.equal(mockClientes);",
                  "err": {},
                  "uuid": "ee5ba123-7734-4c98-9775-f0e996ee8bae",
                  "parentUUID": "fb86f982-6ecd-43e4-bef3-3f606ac46cf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee5ba123-7734-4c98-9775-f0e996ee8bae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00957a1c-b994-473a-83a5-3ab2b258a20e",
              "title": "create",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
              "file": "\\test\\ClienteModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería crear un cliente y devolver el cliente creado",
                  "fullTitle": "Cliente Model create debería crear un cliente y devolver el cliente creado",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCliente = { nombre: 'Maria', apellidos: 'Lopez', direccion: 'Calle 123', telefono: '1234567890', email: 'maria@example.com' };\nconst mockClienteCreated = { id: 2, ...newCliente };\nsinon.stub(pool, 'query').resolves({ rows: [mockClienteCreated] });\nconst result = await Cliente.create(newCliente);\nexpect(result).to.deep.equal(mockClienteCreated);",
                  "err": {},
                  "uuid": "7a3a0692-e1e9-4ec2-acf5-8f7aadbb9f1c",
                  "parentUUID": "00957a1c-b994-473a-83a5-3ab2b258a20e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a3a0692-e1e9-4ec2-acf5-8f7aadbb9f1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc0f655d-f97e-494c-a9d9-307c63b38409",
              "title": "findById",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
              "file": "\\test\\ClienteModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver un cliente si se encuentra el ID",
                  "fullTitle": "Cliente Model findById debería devolver un cliente si se encuentra el ID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockCliente = { id: 1, nombre: 'Juan', apellidos: 'Pérez' };\nsinon.stub(pool, 'query').resolves({ rows: [mockCliente] });\nconst result = await Cliente.findById(1);\nexpect(result).to.deep.equal(mockCliente);",
                  "err": {},
                  "uuid": "9c0b4352-81a5-4671-b6a2-1604f213be99",
                  "parentUUID": "cc0f655d-f97e-494c-a9d9-307c63b38409",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c0b4352-81a5-4671-b6a2-1604f213be99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c70212f1-59c0-4d22-95f5-2c5caeeba99b",
              "title": "update",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
              "file": "\\test\\ClienteModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería actualizar un cliente y devolver el cliente actualizado",
                  "fullTitle": "Cliente Model update debería actualizar un cliente y devolver el cliente actualizado",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCliente = { nombre: 'Juan', apellidos: 'Pérez', direccion: 'Nueva Calle', telefono: '9876543210', email: 'juan_nuevo@example.com' };\nconst mockClienteUpdated = { id: 1, ...updatedCliente };\nsinon.stub(pool, 'query').resolves({ rows: [mockClienteUpdated] });\nconst result = await Cliente.update(1, updatedCliente);\nexpect(result).to.deep.equal(mockClienteUpdated);",
                  "err": {},
                  "uuid": "d03f664a-6f13-49d5-86a2-010100301f9b",
                  "parentUUID": "c70212f1-59c0-4d22-95f5-2c5caeeba99b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d03f664a-6f13-49d5-86a2-010100301f9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cba2208-e894-4b00-9103-5ee9df7a589f",
              "title": "delete",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ClienteModel.test.js",
              "file": "\\test\\ClienteModel.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería eliminar un cliente y devolver el cliente eliminado",
                  "fullTitle": "Cliente Model delete debería eliminar un cliente y devolver el cliente eliminado",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockClienteDeleted = { id: 1, nombre: 'Juan', apellidos: 'Pérez', delete_at: new Date() };\nsinon.stub(pool, 'query').resolves({ rows: [mockClienteDeleted] });\nconst result = await Cliente.delete(1);\nexpect(result).to.deep.equal(mockClienteDeleted);",
                  "err": {},
                  "uuid": "dc63fe0e-84a2-4b0f-ad17-8f9e8d972bf5",
                  "parentUUID": "8cba2208-e894-4b00-9103-5ee9df7a589f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc63fe0e-84a2-4b0f-ad17-8f9e8d972bf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
          "title": "EmpleadoController",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\EmpleadoController.test.js",
          "file": "\\test\\EmpleadoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"EmpleadoController\"",
              "fullTitle": "EmpleadoController \"before each\" hook in \"EmpleadoController\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stubs para los métodos del modelo\ncreateStub = sinon.stub(Empleado, 'create');\nfindAllStub = sinon.stub(Empleado, 'findAll');\nfindByIdStub = sinon.stub(Empleado, 'findById');\nupdateStub = sinon.stub(Empleado, 'update');\ndeleteStub = sinon.stub(Empleado, 'delete');",
              "err": {},
              "uuid": "032346d2-ef93-4600-91c7-8ec577cb04d4",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"EmpleadoController\"",
              "fullTitle": "EmpleadoController \"after each\" hook in \"EmpleadoController\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Restaurar los métodos originales\nsinon.restore();",
              "err": {},
              "uuid": "4e976a40-052b-4208-838c-7a9b329e4427",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Debería obtener todos los empleados",
              "fullTitle": "EmpleadoController Debería obtener todos los empleados",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockEmpleados = [{ id: 1, nombre: 'Empleado 1' }, { id: 2, nombre: 'Empleado 2' }];\nfindAllStub.resolves(mockEmpleados);\nconst req = {};\nconst res = {\n    json: sinon.spy(),\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].empleados).to.deep.equal(mockEmpleados);",
              "err": {},
              "uuid": "9a88cdc6-d91f-4567-b712-77fbde08598e",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería manejar el error si getAllEmpleados falla",
              "fullTitle": "EmpleadoController Debería manejar el error si getAllEmpleados falla",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "findAllStub.rejects(new Error('Database error'));\nconst req = {};\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.getAllEmpleados(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].error).to.equal('Database error');",
              "err": {},
              "uuid": "1d9f2976-6b90-49e0-8096-3a96a027ac82",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería crear un nuevo empleado",
              "fullTitle": "EmpleadoController Debería crear un nuevo empleado",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmpleado = { nombre: 'Empleado 1', RFC: 'ABC123', telefono: '1234567890', apellidos: 'Apellido' };\ncreateStub.resolves(newEmpleado);\nconst req = { body: newEmpleado };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(201)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].empleado).to.deep.equal(newEmpleado);",
              "err": {},
              "uuid": "79212e78-7330-4cd0-90d7-e96d88e13216",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería manejar el error si createEmpleado falla",
              "fullTitle": "EmpleadoController Debería manejar el error si createEmpleado falla",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "createStub.rejects(new Error('Error al crear empleado'));\nconst req = { body: {} };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.createEmpleado(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].error).to.equal('Error al crear empleado');",
              "err": {},
              "uuid": "462fcb9b-b012-45d5-9f0b-b53388be19d3",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería obtener un empleado por ID",
              "fullTitle": "EmpleadoController Debería obtener un empleado por ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockEmpleado = { id: 1, nombre: 'Empleado 1' };\nfindByIdStub.resolves(mockEmpleado);\nconst req = { params: { id: 1 } };\nconst res = {\n    json: sinon.spy(),\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].empleado).to.deep.equal(mockEmpleado);",
              "err": {},
              "uuid": "b7bdf988-2816-4acb-b648-d003cf10207b",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería manejar el error si getEmpleadoById falla",
              "fullTitle": "EmpleadoController Debería manejar el error si getEmpleadoById falla",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "findByIdStub.rejects(new Error('Database error'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.getEmpleadoById(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].error).to.equal('Database error');",
              "err": {},
              "uuid": "c7a48212-8ea4-42d6-87ab-77706648af48",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería actualizar un empleado",
              "fullTitle": "EmpleadoController Debería actualizar un empleado",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedEmpleado = { id: 1, nombre: 'Empleado actualizado' };\nupdateStub.resolves(updatedEmpleado);\nconst req = { params: { id: 1 }, body: { nombre: 'Empleado actualizado' } };\nconst res = {\n    json: sinon.spy(),\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].empleado).to.deep.equal(updatedEmpleado);",
              "err": {},
              "uuid": "2d35b662-72f7-4936-b7e3-cf014c4776a2",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería manejar el error si updateEmpleado falla",
              "fullTitle": "EmpleadoController Debería manejar el error si updateEmpleado falla",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "updateStub.rejects(new Error('Database error'));\nconst req = { params: { id: 1 }, body: { nombre: 'Empleado actualizado' } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.updateEmpleado(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].error).to.equal('Database error');",
              "err": {},
              "uuid": "ce8904ed-49ae-4e11-9a7a-e22926b38d0e",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Debería manejar el error si deleteEmpleado falla",
              "fullTitle": "EmpleadoController Debería manejar el error si deleteEmpleado falla",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "deleteStub.rejects(new Error('Database error'));\nconst req = { params: { id: 1 } };\nconst res = {\n    status: sinon.stub().returnsThis(),\n    json: sinon.spy(),\n};\nawait EmpleadoController.deleteEmpleado(req, res);\nexpect(res.status.calledWith(500)).to.be.true;\nexpect(res.json.calledOnce).to.be.true;\nexpect(res.json.args[0][0].error).to.equal('Database error');",
              "err": {},
              "uuid": "7e8c68d0-be01-4e72-bdec-bc080eaedb64",
              "parentUUID": "37fea443-c5e1-4a5c-959e-a69a0e2f7dfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a88cdc6-d91f-4567-b712-77fbde08598e",
            "1d9f2976-6b90-49e0-8096-3a96a027ac82",
            "79212e78-7330-4cd0-90d7-e96d88e13216",
            "462fcb9b-b012-45d5-9f0b-b53388be19d3",
            "b7bdf988-2816-4acb-b648-d003cf10207b",
            "c7a48212-8ea4-42d6-87ab-77706648af48",
            "2d35b662-72f7-4936-b7e3-cf014c4776a2",
            "ce8904ed-49ae-4e11-9a7a-e22926b38d0e",
            "7e8c68d0-be01-4e72-bdec-bc080eaedb64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aaa055f7-9aea-481b-a452-f3b828350d61",
          "title": "Servicio Model",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\ServiciosModel.test.js",
          "file": "\\test\\ServiciosModel.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Servicio Model\"",
              "fullTitle": "Servicio Model \"after each\" hook in \"Servicio Model\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restauramos todos los mocks, stubs, etc.",
              "err": {},
              "uuid": "a646cca0-5a19-43d4-a87c-e6d3f96e4a95",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "findAll debería devolver todos los servicios",
              "fullTitle": "Servicio Model findAll debería devolver todos los servicios",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockServicios = [\n    { id: 1, ubicacion: 'Ubicación A', precio: 100, idservicio: 1 },\n    { id: 2, ubicacion: 'Ubicación B', precio: 200, idservicio: 2 }\n];\nsinon.stub(pool, 'query').resolves({ rows: mockServicios });\nconst servicios = await Servicio.findAll();\nexpect(servicios).to.deep.equal(mockServicios);",
              "err": {},
              "uuid": "970a4474-b1a6-42fb-bab7-90219e9f8001",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create debería crear un nuevo servicio",
              "fullTitle": "Servicio Model create debería crear un nuevo servicio",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const servicioData = { ubicacion: 'Ubicación A', precio: 100, idservicio: 1 };\nconst mockServicio = { id: 1, ...servicioData };\nsinon.stub(pool, 'query').resolves({ rows: [mockServicio] });\nconst servicio = await Servicio.create(servicioData);\nexpect(servicio).to.deep.equal(mockServicio);",
              "err": {},
              "uuid": "ad5ab227-b732-44f4-808d-29c0521ab642",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "findById debería devolver un servicio por su ID",
              "fullTitle": "Servicio Model findById debería devolver un servicio por su ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockServicio = { id: 1, ubicacion: 'Ubicación A', precio: 100, idservicio: 1 };\nsinon.stub(pool, 'query').resolves({ rows: [mockServicio] });\nconst servicio = await Servicio.findById(1);\nexpect(servicio).to.deep.equal(mockServicio);",
              "err": {},
              "uuid": "3b9dbb1a-2c4b-4e79-989f-74ac6cd9b29f",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update debería actualizar un servicio correctamente",
              "fullTitle": "Servicio Model update debería actualizar un servicio correctamente",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = { ubicacion: 'Ubicación A actualizada', precio: 150, idservicio: 1 };\nconst mockServicioActualizado = { id: 1, ...updatedData };\nsinon.stub(pool, 'query').resolves({ rows: [mockServicioActualizado] });\nconst servicio = await Servicio.update(1, updatedData);\nexpect(servicio).to.deep.equal(mockServicioActualizado);",
              "err": {},
              "uuid": "b9e31154-da5e-4ff0-bc31-78e482ec6640",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete debería marcar un servicio como eliminado",
              "fullTitle": "Servicio Model delete debería marcar un servicio como eliminado",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockServicio = { id: 1, ubicacion: 'Ubicación A', precio: 100, idservicio: 1 };\nsinon.stub(pool, 'query').resolves({ rows: [mockServicio] });\nconst result = await Servicio.delete(1);\nexpect(result.message).to.equal('Servicio eliminado correctamente');\nexpect(result.servicio).to.deep.equal(mockServicio);",
              "err": {},
              "uuid": "0191d386-36c5-4362-a8ec-daf1b434a72f",
              "parentUUID": "aaa055f7-9aea-481b-a452-f3b828350d61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "970a4474-b1a6-42fb-bab7-90219e9f8001",
            "ad5ab227-b732-44f4-808d-29c0521ab642",
            "3b9dbb1a-2c4b-4e79-989f-74ac6cd9b29f",
            "b9e31154-da5e-4ff0-bc31-78e482ec6640",
            "0191d386-36c5-4362-a8ec-daf1b434a72f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a172b974-829f-416a-bd95-f79ea42b885a",
          "title": "Usuario Model",
          "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
          "file": "\\test\\UserModels.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Usuario Model\"",
              "fullTitle": "Usuario Model \"before all\" hook in \"Usuario Model\"",
              "timedOut": false,
              "duration": 1033,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar primero la tabla de EMPLEADOS y luego la de USUARIOS para evitar conflictos de claves foráneas\nawait pool.query('DELETE FROM EMPLEADOS');\nawait pool.query('DELETE FROM USUARIOS');",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND proyectointegrador_db_1",
                "estack": "Error: getaddrinfo ENOTFOUND proyectointegrador_db_1\n    at C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (file:///C:/Users/ferle/Pictures/ProyectoIntegrador/test/UserModels.test.js:9:5)",
                "diff": null
              },
              "uuid": "e56d669e-559c-4d62-a5af-f3fe5bfa42a3",
              "parentUUID": "a172b974-829f-416a-bd95-f79ea42b885a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Usuario Model\"",
              "fullTitle": "Usuario Model \"after all\" hook in \"Usuario Model\"",
              "timedOut": false,
              "duration": 1027,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Limpiar las tablas nuevamente después de las pruebas\nawait pool.query('DELETE FROM EMPLEADOS');\nawait pool.query('DELETE FROM USUARIOS');",
              "err": {
                "message": "Error: getaddrinfo ENOTFOUND proyectointegrador_db_1",
                "estack": "Error: getaddrinfo ENOTFOUND proyectointegrador_db_1\n    at C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Context.<anonymous> (file:///C:/Users/ferle/Pictures/ProyectoIntegrador/test/UserModels.test.js:15:5)",
                "diff": null
              },
              "uuid": "0c0e4159-d507-47b5-abb2-f3dd297f1d51",
              "parentUUID": "a172b974-829f-416a-bd95-f79ea42b885a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "afafc9f9-2e75-4d0f-8192-4a0af78c862c",
              "title": "findAll",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver una lista vacía si no hay usuarios",
                  "fullTitle": "Usuario Model findAll debería devolver una lista vacía si no hay usuarios",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuarios = await Usuario.findAll();\nexpect(usuarios).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "81e3d034-70a9-4377-a3f3-161899c3477d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "81e3d034-70a9-4377-a3f3-161899c3477d"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d1a271b-d4e2-400b-a829-0c94de8a2d14",
              "title": "create",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería crear un usuario correctamente",
                  "fullTitle": "Usuario Model create debería crear un usuario correctamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuario = await Usuario.create({\n  nombre: 'Juan',\n  correo: 'juan@example.com',\n  contraseña: 'password123',\n  idrol: 1\n});\nexpect(usuario).to.include({ nombre: 'Juan', correo: 'juan@example.com', idrol: 1 });",
                  "err": {},
                  "uuid": "0bac27bd-914c-46f5-8ee1-6eeeb2989a74",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0bac27bd-914c-46f5-8ee1-6eeeb2989a74"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee988828-d94a-4267-8d18-b4815b099841",
              "title": "findById",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver un usuario existente por su ID",
                  "fullTitle": "Usuario Model findById debería devolver un usuario existente por su ID",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuarioCreado = await Usuario.create({\n  nombre: 'Carlos',\n  correo: 'carlos@example.com',\n  contraseña: 'password456',\n  idrol: 2\n});\nconst usuario = await Usuario.findById(usuarioCreado.idUsuarios);\nexpect(usuario).to.not.be.null;\nexpect(usuario).to.include({ nombre: 'Carlos', correo: 'carlos@example.com', idrol: 2 });",
                  "err": {},
                  "uuid": "a4bcdbd5-0547-4933-a1db-cb8710d0895f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "debería devolver null si el usuario no existe",
                  "fullTitle": "Usuario Model findById debería devolver null si el usuario no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuario = await Usuario.findById(9999); // ID que no existe\nexpect(usuario).to.be.null;",
                  "err": {},
                  "uuid": "c5fd10ff-e010-4e99-a452-24050a36fd31",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "a4bcdbd5-0547-4933-a1db-cb8710d0895f",
                "c5fd10ff-e010-4e99-a452-24050a36fd31"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abb82f71-e083-4363-b59c-ca59e8973d27",
              "title": "update",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería actualizar un usuario existente correctamente",
                  "fullTitle": "Usuario Model update debería actualizar un usuario existente correctamente",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuario = await Usuario.create({\n  nombre: 'Ana',\n  correo: 'ana@example.com',\n  contraseña: 'password789',\n  idrol: 3\n});\nconst usuarioActualizado = await Usuario.update(usuario.idUsuarios, {\n  nombre: 'Ana Actualizada',\n  correo: 'ana.actualizada@example.com',\n  contraseña: 'newpassword',\n  idrol: 3\n});\nexpect(usuarioActualizado).to.include({\n  nombre: 'Ana Actualizada',\n  correo: 'ana.actualizada@example.com'\n});",
                  "err": {},
                  "uuid": "bce81482-b4db-43fe-8bba-3d6adcef7d3a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "debería devolver null si el usuario a actualizar no existe",
                  "fullTitle": "Usuario Model update debería devolver null si el usuario a actualizar no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuarioActualizado = await Usuario.update(9999, {\n  nombre: 'Nombre Inexistente',\n  correo: 'correo@inexistente.com',\n  contraseña: 'contraseña',\n  idrol: 4\n});\nexpect(usuarioActualizado).to.be.null;",
                  "err": {},
                  "uuid": "c4fefff4-0a09-4b60-b638-e82f85eacb77",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "bce81482-b4db-43fe-8bba-3d6adcef7d3a",
                "c4fefff4-0a09-4b60-b638-e82f85eacb77"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83579e10-3ddf-494f-ae90-8816a8f62ab8",
              "title": "delete",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería marcar un usuario como eliminado",
                  "fullTitle": "Usuario Model delete debería marcar un usuario como eliminado",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuario = await Usuario.create({\n  nombre: 'Eliminar',\n  correo: 'eliminar@example.com',\n  contraseña: 'contraseñaborrar',\n  idrol: 1\n});\nconst usuarioEliminado = await Usuario.delete(usuario.idUsuarios);\nexpect(usuarioEliminado).to.include({ nombre: 'Eliminar', correo: 'eliminar@example.com' });\nexpect(usuarioEliminado.delete_at).to.not.be.null;",
                  "err": {},
                  "uuid": "2cf9cd5b-a222-46a6-80f4-b97185df21c4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "debería devolver null si el usuario ya fue eliminado o no existe",
                  "fullTitle": "Usuario Model delete debería devolver null si el usuario ya fue eliminado o no existe",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const usuarioEliminado = await Usuario.delete(9999); // ID inexistente o eliminado\nexpect(usuarioEliminado).to.be.null;",
                  "err": {},
                  "uuid": "fe52cb3a-f83e-4def-ab75-ccde2d1e9b8e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2cf9cd5b-a222-46a6-80f4-b97185df21c4",
                "fe52cb3a-f83e-4def-ab75-ccde2d1e9b8e"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "743ec034-ac40-488d-8212-7ee50d0d28cb",
              "title": "Pruebas adicionales",
              "fullFile": "C:\\Users\\ferle\\Pictures\\ProyectoIntegrador\\test\\UserModels.test.js",
              "file": "\\test\\UserModels.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "debería devolver una lista con usuarios después de creación",
                  "fullTitle": "Usuario Model Pruebas adicionales debería devolver una lista con usuarios después de creación",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Usuario.create({ nombre: 'Lista', correo: 'lista@example.com', contraseña: 'contraseña', idrol: 2 });\nconst usuarios = await Usuario.findAll();\nexpect(usuarios).to.be.an('array').that.is.not.empty;",
                  "err": {},
                  "uuid": "e42f83e2-c64f-483f-a06c-324e49c1dd94",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "debería no duplicar usuarios con el mismo correo",
                  "fullTitle": "Usuario Model Pruebas adicionales debería no duplicar usuarios con el mismo correo",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await Usuario.create({ nombre: 'Duplicado', correo: 'duplicado@example.com', contraseña: 'contraseña', idrol: 1 });\n  await Usuario.create({ nombre: 'Duplicado', correo: 'duplicado@example.com', contraseña: 'contraseña', idrol: 1 });\n} catch (error) {\n  expect(error).to.exist;\n}",
                  "err": {},
                  "uuid": "902283a5-4817-4478-8f19-74b9695939a9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "e42f83e2-c64f-483f-a06c-324e49c1dd94",
                "902283a5-4817-4478-8f19-74b9695939a9"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}